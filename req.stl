# Automatically generated STL formula
# Model: example1
# Requirement: req
# Author: Johan Lidén Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init = 0, t_final = 10, dt = 0.1

##########
# Inport #
##########
# sub1 := {1}omega[t]{/1}
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# sub2 := {2}5000{/2}
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# sub3 := {3}(omega[t] < 5000){/3}
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# sub4 := {4}speed[t]{/4}
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# sub5 := {5}50{/5}
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# sub6 := {6}gear[t]{/6}
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# sub7 := {7}3{/7}
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# sub8 := {8}(gear[t] < 3){/8}
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# sub9 := {9}200{/9}
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Switch #
##########
# sub10 := (((gear[t] < 3) and {11}50{/11}) or (not((gear[t] < 3)) and {12}200{/12}))
# Depth: 		3
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# sub11 := (((gear[t] < 3) and {13}(speed[t] <= 50){/13}) or (not((gear[t] < 3)) and {14}(speed[t] <= 200){/14}))
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# sub12 := (((gear[t] < 3) and {15}((omega[t] < 5000)  and  (speed[t] <= 50)){/15}) or (not((gear[t] < 3)) and {16}((omega[t] < 5000)  and  (speed[t] <= 200)){/16}))
# Depth: 		2
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# Prerequisite 1 #
# sub8 ~= 0
prereq1 := (gear[t] < 3)
phi_sub1 := ((omega[t] < 5000)) and ((speed[t] <= 50))

# Prerequisite 2 #
# sub8 == 0
prereq2 := not (((gear[t] < 3)))
phi_sub2 := ((omega[t] < 5000)) and ((speed[t] <= 200))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
phi_implies := ((gear[t] < 3) => ((omega[t] < 5000)) and ((speed[t] <= 50))) and (not (((gear[t] < 3))) => ((omega[t] < 5000)) and ((speed[t] <= 200)))

phi := alw_[t_init,t_final]((((gear[t] < 3)) and (((omega[t] < 5000)) and ((speed[t] <= 50)))) or ((not (((gear[t] < 3)))) and (((omega[t] < 5000)) and ((speed[t] <= 200)))))
